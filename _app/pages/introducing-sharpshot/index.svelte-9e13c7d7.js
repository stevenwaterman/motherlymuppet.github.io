import{S as B,i as F,s as R,q as z,r as A,m as P,k as W,w as j,e as n,g as a,c as o,F as Y,f as s}from"../../chunks/vendor-b123dbec.js";import{B as X}from"../../chunks/BlogPost-fb5b6ef4.js";import{Y as D}from"../../chunks/YoutubeEmbed-3d57994a.js";import"../../chunks/Template-7e2d3e9c.js";/* empty css                                                              */function J(T){let i,r,l,p,m,x,f,g,u,C,h,I,d,_,c,H,b,q,w,M,v,L,y,E,S,G,$,k;return u=new D({props:{code:"rmkditieXoE"}}),{c(){i=n("p"),i.innerHTML=`In a group of three, we wrote <a href="https://github.com/stevenwaterman/SharpShot/releases/tag/0.1">v0.1 of SharpShot</a> in 24 hours.
    The first commit was 2 hours after the hackathon started, and by hour 5 it was fully usable - which I know thanks to a commit optimistically titled &quot;<a href="https://github.com/stevenwaterman/SharpShot/commit/158d76c4ee01c7ccc2c50a855bb216d669a1361e">Hackathon done!</a>&quot; at 4:45pm.`,r=a(),l=n("p"),l.textContent=`The remaining 17 hours contained more playing with the program than developing it.
    It is incredibly addictive - when taking the Github screenshot I accidentally spent 5 hours playing around with it instead.
    SharpShot won the "Github prize for best developer tool", and placed second overall in the hackathon.`,p=a(),m=n("h2"),m.textContent="What is Sharpshot?",x=a(),f=n("p"),f.innerHTML=`Sharpshot is a game where players attempt to solve a series of challenges by combining simple components.
    They place <em>nodes</em> on a rectangular grid known as a <em>board</em>.
    Its size is configurable by the user.
    Each node performs a pre-determined function on <em>bullets</em>, which carry data around the board.
    When a bullet leaves the board, it is written to the output.
    When two bullets collide, they annhilate each other, which is the main way of performing boolean logic!`,g=a(),z(u.$$.fragment),C=a(),h=n("p"),h.textContent="A solution is scored on three metrics:",I=a(),d=n("ul"),d.innerHTML=`<li><em>Speed</em> - The total number of ticks taken for the test suite</li> 
    <li><em>Cost</em> - Each node placed increases the cost, with more complex nodes costing more</li> 
    <li><em>Size</em> - The total number of squares on the board</li>`,_=a(),c=n("p"),c.textContent=`Faster, cheaper, and smaller solutions are better.
    The solution will be given a percentile grading for each of these metrics, relative to all other players.
    It is almost impossible to optimise all three metrics at once, so most solutions will optimise for just one.
    To pass the level, a solution does not need to be optimal - it just has to pass the test suite.`,H=a(),b=n("h2"),b.textContent="Current State & Roadmap",q=a(),w=n("p"),w.innerHTML=`The current version of the game does not have set levels and does not provide a score.
    It is still a sandbox while development continues.
    The core gameplay is quite stable and fun to play around with, which you can do by downloading it <a href="https://github.com/motherlymuppet/SharpShot/releases">via GitHub</a>.`,M=a(),v=n("p"),v.textContent="The game is currently in version 0.4.1, and there's a lot left to do before v1.0. In it's current state, the roadmap is as follows:",L=a(),y=n("ul"),y.innerHTML=`<li><strong>v0.5</strong> - Move, rotate, and delete large sections of a board. Save these extracts as components to allow for reuse.</li> 
    <li><strong>v0.6</strong> - Create infrastructure for challenges, allowing boards to be ran against a test suite. Populate the game with levels in many categories of various difficulties.</li> 
    <li><strong>v0.7</strong> - Add online component and accompanying server code to score solutions on the 3 metrics. Add leaderboards and ability to browse top solutions to each level.</li> 
    <li><strong>v1.0</strong> - Graphical and sound overhaul. Increase general polish of game and make it look less like enterprise software.</li> 
    <li><strong>v1.1</strong> - Support user-made levels.</li>`,E=a(),S=n("p"),S.textContent="I'll let you know how that goes!",G=a(),$=n("p"),$.textContent="If you have any suggestions or comments, definitely get in touch. PRs are always welcome, it's open-source for a reason!"},m(e,t){o(e,i,t),o(e,r,t),o(e,l,t),o(e,p,t),o(e,m,t),o(e,x,t),o(e,f,t),o(e,g,t),A(u,e,t),o(e,C,t),o(e,h,t),o(e,I,t),o(e,d,t),o(e,_,t),o(e,c,t),o(e,H,t),o(e,b,t),o(e,q,t),o(e,w,t),o(e,M,t),o(e,v,t),o(e,L,t),o(e,y,t),o(e,E,t),o(e,S,t),o(e,G,t),o(e,$,t),k=!0},p:Y,i(e){k||(P(u.$$.fragment,e),k=!0)},o(e){W(u.$$.fragment,e),k=!1},d(e){e&&s(i),e&&s(r),e&&s(l),e&&s(p),e&&s(m),e&&s(x),e&&s(f),e&&s(g),j(u,e),e&&s(C),e&&s(h),e&&s(I),e&&s(d),e&&s(_),e&&s(c),e&&s(H),e&&s(b),e&&s(q),e&&s(w),e&&s(M),e&&s(v),e&&s(L),e&&s(y),e&&s(E),e&&s(S),e&&s(G),e&&s($)}}}function K(T){let i,r;return i=new X({props:{id:"introducing-sharpshot",$$slots:{default:[J]},$$scope:{ctx:T}}}),{c(){z(i.$$.fragment)},m(l,p){A(i,l,p),r=!0},p(l,[p]){const m={};p&1&&(m.$$scope={dirty:p,ctx:l}),i.$set(m)},i(l){r||(P(i.$$.fragment,l),r=!0)},o(l){W(i.$$.fragment,l),r=!1},d(l){j(i,l)}}}class Z extends B{constructor(i){super();F(this,i,null,K,R,{})}}export{Z as default};
